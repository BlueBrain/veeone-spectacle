include:
  - project: viz/ci/gitlabpipelines
    file: index.yml
    ref: veeone/spectacle

stages:
  - precheck
  - test-and-build
  - publish

variables:
  KUBERNETES_MEMORY_LIMIT: 4Gi
  KUBERNETES_MEMORY_REQUEST: 4Gi
  # CI_COMMIT_SHORT_SHA is needed to put into the config of Spectacle to display the build version
  DOCKER_BUILD_ARGS: "--build-arg CI_COMMIT_SHORT_SHA=$CI_COMMIT_SHORT_SHA"

# Common configurations
.common-spectacle:
  tags:
    - kubernetes
  before_script:
    - echo "Running common-spectacle before_script..."
    - SPECTACLE_REVISION=$CI_COMMIT_SHORT_SHA
    - echo "SPECTACLE_REVISION = ${SPECTACLE_REVISION}"

.publish-spectacle:
  extends:
    - .common-spectacle
    - .publish-image-using-kaniko

.build-spectacle:
  stage: test-and-build
  extends:
    - .common-spectacle
    - .build-image-using-kaniko


# This stage checks whether we don't accidentally try to merge
# a feature or bugfix into the master branch directly.
# It will raise an error and stop the pipeline in that case.
check-branch-names:
  stage: precheck
  image:
    name: bash:latest
  script:
    - |-
      #!/bin/bash
      echo $SHELL
      echo "Commit revision: $CI_COMMIT_SHA ($CI_COMMIT_SHORT_SHA)"
      echo "Source branch: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
      echo "Target branch: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
      if [[ $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ ^(feature|bugfix) ]] && [[ $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master" ]]
      then
        echo "Branch name check failed. You can't merge branches into master that start with 'feature' or 'bugfix'"
        exit 1
      else
        echo "Branch name check - OK"
      fi
  rules:
    - if: $CI_MERGE_REQUEST_IID


# This job build an image - all tests are assumed to be run in build phase (of the image).
build-docker:
  extends: .build-spectacle


# Once an MR is merged we want to publish the image according to the following rules.

# Every merge into develop ends up with a "latest" tag
publish-develop:
  extends: .publish-spectacle
  variables:
    REGISTRY_IMAGE_TAG: latest
  rules:
    - if: $CI_COMMIT_BRANCH == "develop"

# We can publish every branch into a "sandbox" instance by running a manual pipeline
# and providing a sandbox-1, sandbox-2 or sandbox-3 git tag that indicates target sandbox environment.
publish-sandbox:
  extends: .publish-spectacle
  variables:
    REGISTRY_IMAGE_TAG: $CI_COMMIT_TAG
  rules:
    - if: $CI_COMMIT_TAG =~ /^sandbox-[1-3]$/

publish-stable:
  extends: .publish-spectacle
  variables:
    REGISTRY_IMAGE_TAG: stable
  rules:
    - if: $CI_COMMIT_BRANCH == "master"


publish-version:
  extends: .kaniko
  stage: publish
  tags:
    - kubernetes
  variables:
    KUBERNETES_MEMORY_LIMIT: 2Gi
    KUBERNETES_MEMORY_REQUEST: 2Gi
    CI_REGISTRY_IMAGE: bbpgitlab.epfl.ch:5050/viz/veeone/spectacle
  rules:
    - if: '$CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master"'
  script:
    - |-
      #!/bin/bash
      
      # Here we extract the version of the app based on the package.json
      NPM_PACKAGE_VERSION=$(cat package.json | grep \"version\" | head -1 | awk -F= "{ print $2 }" | sed 's/[version:,\",]//g' | tr -d '[[:space:]]')
      echo "Package version: '$NPM_PACKAGE_VERSION'"
      
      # If it doesn't get the version string (or it's empty), the job will fail
      if [[ -z "${NPM_PACKAGE_VERSION}" ]]; then
        echo "No NPM_PACKAGE_VERSION found in package.json or the string is empty" &
        exit 1
      fi
      
      # We build the image based on the parsed NPM package version
      KANIKOPROXYBUILDARGS="--build-arg http_proxy=${http_proxy} --build-arg https_proxy=${https_proxy} --build-arg no_proxy=${no_proxy}"
      KANIKO_PUSH_ARGS="--destination $CI_REGISTRY_IMAGE:$NPM_PACKAGE_VERSION"
      echo "KANIKO_PUSH_ARGS: $KANIKO_PUSH_ARGS"
      
      if [[ -z "$DOCKERFILE_PATH" ]]; then DOCKERFILE_PATH="${BUILD_PATH}/Dockerfile"; fi
      echo DOCKERFILE_PATH=$DOCKERFILE_PATH
      /kaniko/executor --context $BUILD_PATH --dockerfile $DOCKERFILE_PATH $KANIKOPROXYBUILDARGS $DOCKER_BUILD_ARGS $KANIKO_PUSH_ARGS --skip-tls-verify --snapshotMode=redo

